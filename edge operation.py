# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R1HP3HPoxaUMZKtgHThmNOu3PBUielzC
"""

from PIL import Image
import numpy as np

#image_link is the link to the image
#filter is a 3x3 filter
# edge_op should be a letter out of O, S, P, R, W
#O- omit edge pixels, S- shrink filter at edges, P-pad the image with black white coloured pixels, R-replicate edge rows and W-wrap the image

def filter_func(image_link, filter, edge_op):
  img = Image.open(image_link)
  # print(img.size)  
  image = np.asarray(img)
  # print(image.shape)

  filter = np.flipud(np.fliplr(filter)) #flip the filter
  x_shape = image.shape[1]
  y_shape = image.shape[0]
  output = np.zeros((x_shape, y_shape))

  if (edge_op == "S"):
    for y in range(y_shape):
      y_back = 0
      for x in range(x_shape):
        x_back = 0
        shrinked = filter

        if x == 0:
          shrinked = shrinked[:,1:]
        elif x == x_shape-1:
          shrinked = filter[:, :-1]
        else:
          x_back = 1
        
        if y == 0:
          shrinked = shrinked[1:, :]
        elif y == y_shape-1:
          shrinked = shrinked[:-1, :]
        else:
          y_back = 1

        output[x, y] = (shrinked * image[y-y_back: y+2, x-x_back: x+2]).sum()
  else:
    if (edge_op == "O"):
      x_shape = x_shape - 2
      y_shape = y_shape - 2
      output = np.zeros((x_shape, y_shape))
      input = image

    elif (edge_op == "P"):
      input = np.zeros((y_shape + 2, x_shape +2))
      input[1:-1, 1:-1] = image

    elif (edge_op == "R"):
      input = np.zeros((y_shape + 2, x_shape +2))
      input[1:-1, 1:-1] = image
      input[0, 1:-1] = image[0]
      input[-1, 1:-1] = image[-1]
      input[1:-1, 0] = image[:, 0]
      input[1:-1, -1] = image[:, -1]

    elif(edge_op == "W"):
      input = np.zeros((y_shape + 2, x_shape +2))
      input[1:-1, 1:-1] = image
      input[0, 1:-1] = image[-1]
      input[-1, 1:-1] = image[0]
      input[1:-1, 0] = image[:, -1]
      input[1:-1, -1] = image[:, 0]

    for y in range(y_shape):
      for x in range(x_shape):
        output[x, y] = (filter * input[y: y+3, x: x+3]).sum()

  # print(output.shape)
  
  img = Image.fromarray(output, 'RGB')
  img.save('processed.png')

  # return output




  



# filter_func("/content/lenna.png", [[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]], "S")